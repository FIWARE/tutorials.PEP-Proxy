#!/bin/bash
#
#  Command Line Interface to start all services associated with the Getting-Started Tutorial
#
#  For this tutorial the commands are merely a convenience script to run docker-compose
#

set -e

if (( $# != 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [create|orion|southport|northport]"
    exit 1
fi

SCORPIO="http://scorpio:9090/scorpio/v1/info/"
ORION="http://orion:1026/version"
IOT_AGENT="http://iot-agent:4041/version"
CONTEXT="http://context-provider:3000/data-models/ngsi-context.jsonld"
KEYROCK="http://keyrock:3005/version"

pause(){
	printf " "
	count="$1"
	[ "$count" -gt 59 ] && printf "Waiting one minute " || printf " Waiting a few seconds ";
	while [ "$count" -gt 0 ]
	do
		printf "."
		sleep 3
		count=$((count - 3))
	done
	echo ""
}

getHeartbeat(){
	eval "response=$(docker run --network fiware_default --rm curlimages/curl -s -o /dev/null -w "%{http_code}" "$1")"
}

waitForOrion () {
	echo -e "\n⏳ Waiting for \033[1;34mOrion-LD\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-orion` == "healthy" ]
	do
		echo -e "\nContext Broker HTTP state: ${response} (waiting for 200)"
		pause 6
		getHeartbeat "${ORION}"
	done
}

waitForScorpio () {
	echo -e "\n⏳ Waiting for \033[1;34mScorpio\033[0m to respond\n"
	getHeartbeat "${SCORPIO}"
	while [ "${response}" -eq 000 ]
	do
		echo -e "Context Broker HTTP state: ${response} (waiting for 500)"
		pause 60
		getHeartbeat "${SCORPIO}"
	done
	echo -e "\n⏳ Waiting for all \033[1;34mScorpio\033[0m services to be fully available\n"
	while [ "$response" -eq 500 ]
	do
		echo -e "Context Broker HTTP state: ${response} (waiting for 200)"
		pause 60
		getHeartbeat "${SCORPIO}"
	done
}

waitForContext () {
	echo -e "\n⏳ Waiting for \033[1m@context\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-iot-agent` == "healthy" ]
	do
		echo -e "\n@context HTTP state: ${response} (waiting for 200)"
		pause 3
		getHeartbeat "${CONTEXT}"
	done
}

waitForIoTAgent () {
	echo -e "\n⏳ Waiting for \033[1;36mIoT-Agent\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-iot-agent` == "healthy" ]
	do
		echo -e "\nIoT Agent HTTP state: ${response} (waiting for 200)"
		pause 3
		getHeartbeat "${IOT_AGENT}"
	done
}

waitForKeyrock () {
	echo -e "⏳ Waiting for \033[1;31mKeyrock\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' fiware-keyrock` == "healthy" ]	
	do
		echo -e "\nKeyrock HTTP state: ${response} (waiting for 200)"
		pause 9
		getHeartbeat "${KEYROCK}"
	done
}

waitForMongo () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo` == "healthy" ]
	do 
		sleep 1
	done
}


loadData () {
	waitForContext
	export CONTEXT_BROKER="$1" 
	docker run --rm -v $(pwd)/import-data:/import-data \
		--network fiware_default \
		-e CONTEXT_BROKER=${CONTEXT_BROKER} \
		-e TUTORIAL_DATA_MODELS_CONTEXT=${CONTEXT} \
		--entrypoint /bin/ash curlimages/curl import-data
	waitForIoTAgent
	docker run --rm -v $(pwd)/provision-devices:/provision-devices \
		--network fiware_default \
		-e CONTEXT_BROKER=${CONTEXT_BROKER} \
		-e TUTORIAL_DATA_MODELS_CONTEXT=${CONTEXT} \
		--entrypoint /bin/ash curlimages/curl provision-devices
	echo ""
}

waitForContext () {
	echo -e "\n⏳ Waiting for \033[1m@context\033[0m to be available\n"
	while [ `docker run --network fiware_default --rm curlimages/curl -s -o /dev/null -w %{http_code} 'http://context-provider:3000/data-models/ngsi-context.jsonld'` -eq 000 ]
	do 
	  echo -e "@context HTTP state: " `curl -s -o /dev/null -w %{http_code} 'http://context-provider:3000/data-models/ngsi-context.jsonld'` " (waiting for 200)"
	  sleep 1
	done
}

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name=fiware-*
	echo ""
}

addDatabaseIndex () {
	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrion\033[0m  ..."
	docker exec  db-mongo mongo --eval '
	conn = new Mongo();db.createCollection("orion");
	db = conn.getDB("orion");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null

	docker exec  db-mongo mongo --eval '
	conn = new Mongo();db.createCollection("orion-openiot");
	db = conn.getDB("orion-openiot");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"

	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;36mIoT-Agent\033[0m  ..."
	docker exec  db-mongo mongo --eval '
	conn = new Mongo();
	db = conn.getDB("iotagentul");
	db.createCollection("devices");
	db.devices.createIndex({"_id.service": 1, "_id.id": 1, "_id.type": 1});
	db.devices.createIndex({"_id.type": 1}); 
	db.devices.createIndex({"_id.id": 1});
	db.createCollection("groups");
	db.groups.createIndex({"_id.resource": 1, "_id.apikey": 1, "_id.service": 1});
	db.groups.createIndex({"_id.type": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"
}

startContainers () {
	echo ""
	export IDM_HTTPS_ENABLED="$1" 
	docker-compose --env-file=.env --log-level ERROR -f docker-compose/$2 -p fiware up -d --remove-orphans
	echo ""
}

stoppingContainers () {
	echo "Stopping containers"
	docker-compose --env-file=.env --log-level ERROR -f docker-compose/southport.yml  -p fiware down -v --remove-orphans
}

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|orion|northport]"
        ;;
    "orion")
		stoppingContainers
		echo -e "Starting seven containers \033[1;34mOrion\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;31mKeyrock\033[0m, \033[1;31mWilma\033[0m, \033[1mTutorial\033[0m and \033[1mMongoDB\033[0m and \033[1mMySQL\033[0m databases."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- \033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "- \033[1mTutorial\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo -e "- \033[1;31mKeyrock\033[0m is an Identity Management Front-End"
		echo -e "- \033[1;31mWilma\033[0m is a PEP Proxy around \033[1;34mOrion\033[0m"
		startContainers false orion.yml
		waitForMongo
		addDatabaseIndex
		waitForOrion
		loadData orion:1026
		waitForKeyrock
		displayServices
		echo -e "Now open \033[4mhttp://localhost:3000\033[0m"
		;;
	"southport")
		stoppingContainers
		echo -e "Starting eight containers \033[1;34mOrion\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;31mKeyrock\033[0m, \033[1;31mWilma\033[0m, \033[1mTutorial\033[0m and \033[1mMongoDB\033[0m and \033[1mMySQL\033[0m databases."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- \033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "- \033[1mTutorial\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo -e "- \033[1;31mKeyrock\033[0m is an Identity Management Front-End"
		echo -e "- 2 instances of \033[1;31mWilma\033[0m as a PEP Proxy around \033[1;34mOrion\033[0m and between the Devices and \033[1;36mIoT-Agent\033[0m Southport"
		startContainers false southport.yml
		waitForMongo
		addDatabaseIndex
		waitForOrion
		loadData orion:1026
		waitForKeyrock
		displayServices
		echo -e "Now open \033[4mhttp://localhost:3000\033[0m"
		;;
	"northport")
		stoppingContainers
		echo -e "Starting seven containers \033[1;34mOrion\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1;31mKeyrock\033[0m, \033[1;31mWilma\033[0m, \033[1mTutorial\033[0m and \033[1mMongoDB\033[0m and \033[1mMySQL\033[0m databases."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- \033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "- \033[1mTutorial\033[0m acts as a series of dummy IoT Sensors over HTTP"
		echo -e "- \033[1;31mKeyrock\033[0m is an Identity Management Front-End"
		echo -e "- \033[1;31mWilma\033[0m as a PEP Proxy between \033[1;34mOrion\033[0m and the \033[1;36mIoT-Agent\033[0m"
		startContainers false northport.yml
		waitForMongo
		addDatabaseIndex
		waitForOrion
		CONTEXT_BROKER="orion:1026" 
		docker run --rm -v $(pwd)/import-data:/import-data \
			--network fiware_default \
			-e CONTEXT_BROKER=${CONTEXT_BROKER} \
			-e TUTORIAL_DATA_MODELS_CONTEXT=${CONTEXT} \
			--entrypoint /bin/ash curlimages/curl import-data
		waitForKeyrock
		displayServices
		echo
		echo -e "Now open \033[4mhttp://localhost:3000\033[0m"
		;;
	"stop")
		stoppingContainers
		;;
	"start")
		./services orion
		;;
	"create")
		echo "Pulling Docker images"
		docker-compose --env-file=.env --log-level ERROR -f docker-compose/orion.yml -p fiware pull
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|orion|southport|northport|stop]"
		exit 127;
		;;
esac



